const fs = require('fs');
const path = require('path');

// C·∫•u h√¨nh Gemini API
const GEMINI_API_KEY = 'AIzaSyB-vqzjj-4lejpeoF5zFTLc23o-8Jf_Qhs';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';

// Test v·ªõi m·ªôt file v√† m·ªôt ng√¥n ng·ªØ
const TEST_FILE = 'convert-webp-to-jpg.json';
const TEST_LANGUAGE = 'vi'; // Ti·∫øng Vi·ªát

// Delay function
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// G·ª≠i request ƒë·∫øn Gemini API
async function translateWithGemini(text, targetLanguage) {
    if (!GEMINI_API_KEY) {
        throw new Error('Vui l√≤ng th√™m GEMINI_API_KEY v√†o script');
    }

    const prompt = `Translate the following JSON content from English to Vietnamese. 
Keep the JSON structure exactly the same, only translate the text values. 
Keep HTML tags, URLs, and technical terms unchanged. 
Return ONLY the raw JSON without any markdown formatting, code blocks, or explanations:

${text}`;

    const requestBody = {
        contents: [{
            parts: [{
                text: prompt
            }]
        }]
    };

    try {
        const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.candidates && data.candidates[0] && data.candidates[0].content) {
            return data.candidates[0].content.parts[0].text;
        } else {
            throw new Error('Invalid response format from Gemini API');
        }
    } catch (error) {
        console.error(`Error translating to ${targetLanguage}:`, error.message);
        throw error;
    }
}

// Test function
async function testTranslate() {
    if (!GEMINI_API_KEY) {
        console.error('‚ùå Vui l√≤ng th√™m GEMINI_API_KEY v√†o script');
        return;
    }

    console.log('üß™ Testing translation with single file...');
    
    const sourceFilePath = path.join(__dirname, 'locales', 'en', 'image', TEST_FILE);
    
    if (!fs.existsSync(sourceFilePath)) {
        console.error(`‚ùå File not found: ${sourceFilePath}`);
        return;
    }

    try {
        // ƒê·ªçc file g·ªëc
        console.log(`üìñ Reading file: ${TEST_FILE}`);
        const sourceData = JSON.parse(fs.readFileSync(sourceFilePath, 'utf8'));
        
        // C·∫≠p nh·∫≠t lang v√† lang_name
        const translatedData = {
            ...sourceData,
            lang: TEST_LANGUAGE,
            lang_name: 'Vietnamese'
        };
        
        // Chuy·ªÉn ƒë·ªïi th√†nh JSON string ƒë·ªÉ d·ªãch
        const jsonString = JSON.stringify(translatedData, null, 2);
        
        console.log('üîÑ Sending to Gemini API...');
        
        // Delay tr∆∞·ªõc khi g·ª≠i request
        await delay(4000);
        
        // D·ªãch b·∫±ng Gemini API
        const translatedJsonString = await translateWithGemini(jsonString, TEST_LANGUAGE);
        
        console.log('üìù Parsing response...');
        
        // Parse l·∫°i JSON ƒë√£ d·ªãch
        const translatedDataParsed = JSON.parse(translatedJsonString);
        
        // T·∫°o ƒë∆∞·ªùng d·∫´n file ƒë√≠ch
        const targetFilePath = path.join(__dirname, 'locales', TEST_LANGUAGE, 'image', TEST_FILE);
        
        // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        const targetDir = path.dirname(targetFilePath);
        if (!fs.existsSync(targetDir)) {
            fs.mkdirSync(targetDir, { recursive: true });
        }
        
        // Ghi file ƒë√£ d·ªãch
        fs.writeFileSync(targetFilePath, JSON.stringify(translatedDataParsed, null, 2), 'utf8');
        
        console.log(`‚úÖ Success! Created: ${targetFilePath}`);
        
        // Hi·ªÉn th·ªã m·ªôt s·ªë tr∆∞·ªùng ƒë√£ d·ªãch
        console.log('\nüìã Sample translated fields:');
        console.log(`Title: ${translatedDataParsed.title}`);
        console.log(`Sub title: ${translatedDataParsed.sub_title}`);
        console.log(`Hint: ${translatedDataParsed.hint}`);
        
    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
    }
}

// Ch·∫°y test
testTranslate().catch(console.error);
